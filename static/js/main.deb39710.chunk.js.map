{"version":3,"sources":["List.js","Alert.js","App.js","index.js"],"names":["List","items","removeItem","editItem","className","map","item","id","title","key","type","onClick","Alert","msg","removeAlert","list","useEffect","timeout","setTimeout","clearTimeout","App","useState","name","setName","localStorage","getItem","JSON","parse","setList","isEditing","setIsEditing","editID","setEditID","show","mgs","alert","setAlert","showAlert","setItem","stringify","onSubmit","e","preventDefault","newItem","Date","getTime","toString","placeholder","value","onChange","target","length","filter","specificItem","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAkCeA,EA/BF,SAAH,GAAyC,IAAnCC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAQ,EAARA,SACjC,OACE,yBAAKC,UAAU,gBACZH,EAAMI,KAAI,SAACC,GACV,IAAQC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MACZ,OACE,6BAASC,IAAKF,EAAIH,UAAU,gBAC1B,uBAAGA,UAAU,UAAUI,GACvB,yBAAKJ,UAAU,iBACb,4BACEM,KAAK,SACLN,UAAU,WACVO,QAAS,kBAAMR,EAASI,KAExB,kBAAC,IAAM,OAET,4BACEG,KAAK,SACLN,UAAU,aACVO,QAAS,kBAAMT,EAAWK,KAE1B,kBAAC,IAAO,cCRTK,EAdD,SAAH,GAA0C,IAApCF,EAAI,EAAJA,KAAMG,EAAG,EAAHA,IAAKC,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAWvC,OAVAC,qBAAU,WAER,IAAMC,EAAUC,YAAW,WACzBJ,MACC,KAIH,OAAO,kBAAMK,aAAaF,MACzB,CAACF,IACG,uBAAGX,UAAS,sBAAiBM,IAASG,IC+HhCO,MA5Hf,WAEE,MAAwBC,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KAEpB,EAAwBF,mBAdbG,aAAaC,QAAQ,QAGvBC,KAAKC,MAAMH,aAAaC,QAAQ,SAGhC,IAQ0C,mBAA5CV,EAAI,KAAEa,EAAO,KAEpB,EAAkCP,oBAAS,GAAM,mBAA1CQ,EAAS,KAAEC,EAAY,KAE9B,EAA4BT,mBAAS,MAAK,mBAAnCU,EAAM,KAAEC,EAAS,KAExB,EAA0BX,mBAAS,CACjCY,MAAM,EACNC,IAAK,GACLxB,KAAM,KACN,mBAJKyB,EAAK,KAAEC,EAAQ,KA8ChBC,EAAY,WAAwC,IAAvCJ,EAAI,wDAAUvB,EAAI,uDAAG,GAAIG,EAAG,uDAAG,GAChDuB,EAAS,CAAEH,OAAMvB,OAAMG,SAqCzB,OAJAG,qBAAU,WACRQ,aAAac,QAAQ,OAAQZ,KAAKa,UAAUxB,MAC3C,CAACA,IAGF,6BAASX,UAAU,kBACjB,0BAAMA,UAAU,eAAeoC,SAhFd,SAACC,GAGpB,GAFAA,EAAEC,iBAEGpB,EAIA,GAAIA,GAAQO,EAIfD,EACEb,EAAKV,KAAI,SAACC,GACR,OAAIA,EAAKC,KAAOwB,EACP,2BAAKzB,GAAI,IAAEE,MAAOc,IAEpBhB,MAGXiB,EAAQ,IACRS,EAAU,MACVF,GAAa,GACbO,GAAU,EAAM,UAAW,oBAGxB,CACHA,GAAU,EAAM,UAAW,0BAG3B,IAAMM,EAAU,CAAEpC,IAAI,IAAIqC,MAAOC,UAAUC,WAAYtC,MAAOc,GAG9DM,EAAQ,GAAD,mBAAKb,GAAI,CAAE4B,KAElBpB,EAAQ,SA9BRc,GAAU,EAAM,SAAU,wBA6EvBF,EAAMF,MAAQ,kBAAC,EAAK,iBAAKE,EAAK,CAAErB,YAAauB,EAAWtB,KAAMA,KAC/D,2CACA,yBAAKX,UAAU,gBACb,2BACEM,KAAK,OACLN,UAAU,UACV2C,YAAY,YACZC,MAAO1B,EACP2B,SAAU,SAACR,GAAC,OAAKlB,EAAQkB,EAAES,OAAOF,UAEpC,4BAAQtC,KAAK,SAASN,UAAU,cAC7ByB,EAAY,OAAS,YAI3Bd,EAAKoC,OAAS,GACb,yBAAK/C,UAAU,qBACb,kBAAC,EAAI,CAACH,MAAOc,EAAMb,WA7CR,SAACK,GAElB8B,GAAU,EAAM,SAAU,gBAK1BT,EAAQb,EAAKqC,QAAO,SAAC9C,GAAI,OAAKA,EAAKC,KAAOA,OAsCOJ,SAlClC,SAACI,GAEhB,IAAM8C,EAAetC,EAAKuC,MAAK,SAAChD,GAAI,OAAKA,EAAKC,KAAOA,KACrDuB,GAAa,GACbE,EAAUzB,GAEVgB,EAAQ8B,EAAa7C,UA6Bf,4BAAQJ,UAAU,YAAYO,QAtDpB,WAChB0B,GAAU,EAAM,SAAU,cAG1BT,EAAQ,MAkD+C,kBC9H3D2B,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,U","file":"static/js/main.deb39710.chunk.js","sourcesContent":["import React from \"react\"\nimport { FaEdit, FaTrash } from \"react-icons/fa\"\n\nconst List = ({ items, removeItem, editItem }) => {\n  return (\n    <div className=\"grocery-list\">\n      {items.map((item) => {\n        const { id, title } = item\n        return (\n          <article key={id} className=\"grocery-item\">\n            <p className='\"title'>{title}</p>\n            <div className=\"btn-container\">\n              <button\n                type=\"button\"\n                className=\"edit-btn\"\n                onClick={() => editItem(id)}\n              >\n                <FaEdit />\n              </button>\n              <button\n                type=\"button\"\n                className=\"delete-btn\"\n                onClick={() => removeItem(id)}\n              >\n                <FaTrash />\n              </button>\n            </div>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default List\n","import React, { useEffect } from \"react\"\n\nconst Alert = ({ type, msg, removeAlert, list }) => {\n  useEffect(() => {\n    // After 3 seconds, run the callback function -> call removeAlert()\n    const timeout = setTimeout(() => {\n      removeAlert()\n    }, 3000)\n\n    // clean up function\n    // Once something changes from the list, clear out the timeout\n    return () => clearTimeout(timeout)\n  }, [list]) // Every time the list changes, get a new timer\n  return <p className={`alert alert-${type}`}>{msg}</p>\n}\n\nexport default Alert\n","import React, { useState, useEffect } from \"react\"\nimport List from \"./List\"\nimport Alert from \"./Alert\"\n\nconst getLocalStorage = () => {\n  // Get the item from local storage by key\n  let list = localStorage.getItem(\"list\")\n  // If the list exists, return the list\n  if (list) {\n    return JSON.parse(localStorage.getItem(\"list\"))\n    // If not, return an empty array\n  } else {\n    return []\n  }\n}\n\nfunction App() {\n  // state for the value that is in the form\n  const [name, setName] = useState(\"\")\n  // state for the localStorage in  List\n  const [list, setList] = useState(getLocalStorage())\n  // flag for the state where it is editing or not\n  const [isEditing, setIsEditing] = useState(false)\n  // state for the ID which reflects which item we edit\n  const [editID, setEditID] = useState(null)\n  // state for keeping track the alert\n  const [alert, setAlert] = useState({\n    show: false,\n    mgs: \"\",\n    type: \"\",\n  })\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    // If the value is empty then display the alert\n    if (!name) {\n      showAlert(true, \"danger\", \"Please enter value\")\n    }\n    // If there's something in the value and if isEditing is true then display the alert\n    else if (name && isEditing) {\n      // Iterate over the list array\n      // If the item id matches the id you have in the state \n      // then return all the previous items and change the title to the name in the state right now\n      setList(\n        list.map((item) => {\n          if (item.id === editID) {\n            return { ...item, title: name }\n          }\n          return item\n        })\n      )\n      setName(\"\")\n      setEditID(null)\n      setIsEditing(false)\n      showAlert(true, \"success\", \"value change\")\n    }\n    // If everything is correct then display the alert\n    else {\n      showAlert(true, \"success\", \"item added to the list\")\n      // Create a new item with id and title and add it to the list\n      // Because this is a list so we need an unique ID for it\n      const newItem = { id: new Date().getTime().toString(), title: name } \n      // Function that controls the array\n      // Get previous value from the state and then add newItem to the array\n      setList([...list, newItem]) \n      // Set name to empty string so the moment you add the item, the input is clear\n      setName(\"\")\n    }\n  }\n\n  // Once showAlert is revoked, if show is not passed -> default to false, type and msg to empty string\n  // After 3 seconds, hide the alert\n  const showAlert = (show = false, type = \"\", msg = \"\") => {\n    setAlert({ show, type, msg })\n  }\n\n  // Function to call the whole list\n  const clearList = () => {\n    showAlert(true, \"danger\", \"empty list\")\n\n    // Wipe put all the value in the array\n    setList([])\n  }\n\n  // Function to remove individual item from the list\n  const removeItem = (id) => {\n    // Show the alert that the item is removed\n    showAlert(true, \"danger\", \"item removed\")\n    // Set the list to the new value\n    // filter() return a brand new array\n    // return the item whose id does not match\n    // If the id does not match then add it to the new array\n    setList(list.filter((item) => item.id !== id))\n  }\n\n  // Function to edit each item\n  const editItem = (id) => {\n    // Get items whose id matches\n    const specificItem = list.find((item) => item.id === id)\n    setIsEditing(true)\n    setEditID(id)\n    // Display that item you want to edit\n    setName(specificItem.title)\n  }\n\n  // Every time list changes, set the list to the local storage\n  useEffect(() => {\n    localStorage.setItem(\"list\", JSON.stringify(list))\n  }, [list])\n\n  return (\n    <section className=\"section-center\">\n      <form className=\"grocery-form\" onSubmit={handleSubmit}>\n        {alert.show && <Alert {...alert} removeAlert={showAlert} list={list} />}\n        <h3>grocery bud</h3>\n        <div className=\"form-control\">\n          <input\n            type=\"text\"\n            className=\"grocery\"\n            placeholder=\"e.g. eggs\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          <button type=\"submit\" className=\"submit-btn\">\n            {isEditing ? \"edit\" : \"submit\"}\n          </button>\n        </div>\n      </form>\n      {list.length > 0 && (\n        <div className=\"grocery-container\">\n          <List items={list} removeItem={removeItem} editItem={editItem} />\n          <button className=\"clear-btn\" onClick={clearList}>\n            clear items\n          </button>\n        </div>\n      )}\n    </section>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}